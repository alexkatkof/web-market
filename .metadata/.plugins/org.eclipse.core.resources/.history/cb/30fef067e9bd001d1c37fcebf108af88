package com.catcov.spring.controllers;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.sql.Blob;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.catcov.spring.dao.RepositoryDao;
import com.catcov.spring.models.Page;
import com.catcov.spring.models.Product;
import com.catcov.spring.models.SearchEntity;
import com.catcov.spring.models.User;
import com.catcov.spring.service.ProductService;
import com.catcov.spring.service.SessionService;

import jakarta.validation.Valid;

@Controller
public class ProductController {

	@Autowired
	RepositoryDao repositoryDao;

	@Autowired
	SessionService sessionService;
	
	@Autowired
	ProductService productService;

	// product
	// test
	@RequestMapping(value = "searchProduct", method = RequestMethod.POST)
	public String findProduct(SearchEntity searchEntity, RedirectAttributes redirectAttributes) {
		redirectAttributes.addFlashAttribute("searchEntity", searchEntity);
		return "redirect:/searchSuccess";
	}

	// product
	// test
	@RequestMapping(value = "searchSuccess", method = RequestMethod.GET)
	public String newSearch(SearchEntity searchEntity, Model model, HttpSession session) {
		try {
			int id = Integer.parseInt(searchEntity.getSearchTitle());
			model.addAttribute("products",
					repositoryDao.findProductByIdOrName(id, (String) session.getAttribute("currency")));

		} catch (Exception e) {
			model.addAttribute("products",
					repositoryDao.findProductByIdOrName(searchEntity.getSearchTitle(), (String) session.getAttribute("currency")));

		}
		return "searchProducts";
	}

	// product
	// test
	@RequestMapping(value = "/getStudentPhoto/{id}")
	public void getStudentPhoto(HttpServletResponse response, @PathVariable("id") int id)
			throws Exception {
		response.setContentType("image/jpg");

		Blob ph = repositoryDao.getPhotoById(id);

		byte[] bytes = ph.getBytes(1, (int) ph.length());
		InputStream inputStream = new ByteArrayInputStream(bytes);
		IOUtils.copy(inputStream, response.getOutputStream());
	}

	// product
	@GetMapping(value = "/product_info", params = "id")
	public String getProductInfo(@RequestParam("id") int id, Model model) {
		model.addAttribute("products", repositoryDao.getProductInfo(id));
		return "productInfo";
	}

	// product
	@RequestMapping(value = "/products", params = { "size", "page" }, method = RequestMethod.POST)
	public String product(@RequestParam("size") int size, @RequestParam("page") int page, Model model, @Valid User user,
			BindingResult result, HttpSession session, @ModelAttribute("product") Product product) {
		if (result.hasErrors()) {
			return "index";
		}

		if (product.getCurrency() == null || product.getCurrency().isEmpty()) {
			product.setCurrency("leu");
		} else {
		}

		System.out.println("Products Page Requested POST");
		
		model.addAttribute("cartQuantity", session.getAttribute("cartQuantity"));
		model.addAttribute("Login", user.getLogin());
		model.addAttribute("Pass", user.getPass());
		model.addAttribute("products", repositoryDao.getProductsListNew(size, page, product.getCurrency()));
		model.addAttribute("pages", productService.getPages(size));
		// !!!
		//sessionService.setProduct("specialProduct",
				//repositoryDao.getProductsListNew(size, page, product.getCurrency()));
		session.setAttribute("currency", product.getCurrency());
		session.setAttribute("productId", product.getId());
		if (user.getLogin() == null && user.getPass() == null) {
			user.setLogin((String) session.getAttribute("userLogin"));
			user.setPass((String) session.getAttribute("userPass"));
		}
		int checker = repositoryDao.checkUser(user.getLogin(), user.getPass());
		System.out.println(user.getLogin() + ", " + user.getPass());
		if (checker > 0) {
			session.setAttribute("userLogin", user.getLogin());
			session.setAttribute("userPass", user.getPass());
			return "products";
		} else {
			return "sign_in_error";
		}
	}

	// product
	@GetMapping(value = "/products", params = { "size", "page" })
	public String getProductsByPageNumber(Model model, @ModelAttribute("product") Product product, 
			@RequestParam("size") int size, @RequestParam("page") int page, HttpSession session) {
		product.setCurrency((String) session.getAttribute("currency"));
		System.out.println("Products Page Requested GET");
		System.out.println("page number is " + page);
		System.out.println("size of page is " + size);
		if (product.getCurrency() == null || product.getCurrency().isEmpty()) {
			product.setCurrency("leu");
		} else {
		}

		model.addAttribute("cartQuantity", session.getAttribute("cartQuantity"));
		model.addAttribute("products", repositoryDao.getProductsListNew(size, page, product.getCurrency()));
		model.addAttribute("pages", productService.getPages(size));
		// !!!
		//session.setAttribute("specialProduct", repositoryDao.getProductsListNew(size, page, product.getCurrency()));
		session.setAttribute("productId", product.getId());

		return "products";
	}

	// product
	@GetMapping({ "purchase", "shopping_cart/purchase" })
	public String purchase(HttpSession session) {
		session.removeAttribute("cart");
		session.removeAttribute("cartQuantity");
		return "purchase";
	}

	// productService
//	public List<Page> getPages(int size) {
//		System.out.println("getPages");
//		List<Page> pages = new ArrayList<>();
//		int amountProducts = repositoryDao.getAmountProducts();// -> amount all product from database
//		System.out.println(amountProducts);
//		int countPages = amountProducts / size; // -> amount full pages
//		int lastPage = countPages + 1;
//		int rest = amountProducts % size;// -> rest products in last page
//		for (int i = 1; i <= countPages; i++) {
//			pages.add(new Page("/products?size=" + size + "&page=", "" + i));
//		}
//		if (rest != 0) {
//			pages.add(new Page("/products?size=" + size + "&page=", "" + lastPage));
//		}
//		return pages;
//	}

}
